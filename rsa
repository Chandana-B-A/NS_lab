#include<stdio.h> 
#include<math.h> 
#include<string.h>
// Function to compute gcd
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Function to find the modular inverse of e under modulo phi
int modInverse(int e, int phi) {
    int t = 0, newt = 1;
    int r = phi, newr = e;
    while (newr != 0) {
        int quotient = r / newr;
        int temp = newt;
        newt = t - quotient * newt;
        t = temp;
        temp = newr;
        newr = r - quotient * newr;
        r = temp;
    }
    if (r > 1) return -1;
    if (t < 0) t += phi;
    return t;
}

// Function to perform modular exponentiation
int modExp(int base, int exp, int mod) {
    int result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp = exp / 2;
    }
    return result;
}

int main() {
    int p, q;
    printf("Enter two prime numbers:\n");
    printf("p: ");
    scanf("%d", &p);
    printf("q: ");
    scanf("%d", &q);
    
    // Compute n and phiNo
    int n = p * q;
    int phi = (p - 1) * (q - 1);
    
    // Public key e
    int e = 3;
    while (gcd(e, phi) != 1) {
        e++;
    }
    
    // Private key d
    int d = modInverse(e, phi);
    if (d == -1) {
        printf("Error finding modular inverse\n");
        return 1;
    }
    
    int message;
    printf("Enter a message to encrypt (as an integer): ");
    scanf("%d", &message);
    
    // Encrypting the message
    int encrypted = modExp(message, e, n);
    
    // Decrypting the message
    int decrypted = modExp(encrypted, d, n);
    
    printf("Public Key (e, n): (%d, %d)\n", e, n);
    printf("Private Key (d, n): (%d, %d)\n", d, n);
    printf("Message: %d\n", message);
    printf("Encrypted: %d\n", encrypted);
    printf("Decrypted: %d\n", decrypted);
    
    return 0;
}
